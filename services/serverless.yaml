service: "website-honestly-${env:ENVIRONMENT_NAME}"

custom:
  bucket_name: "${env:BUCKET_NAME}"

package:
  artifact: ../dist/services.zip

provider:
  name: aws
  stage: dev
  region: eu-west-1
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket_name}"
        - "arn:aws:s3:::${self:custom.bucket_name}/*"
    - Effect: 'Allow'
      Action:
        - 'SES:SendEmail'
        - 'SES:SendRawEmail'
      Resource: 'arn:aws:ses:eu-west-1:578418881509:identity/hello@red-badger.com'


functions:
  publish:
    handler: index.publish
    timeout: 60
    memorySize: 2048
    events:
      - http:
          path: publish
          method: post
          cors: true
      # Invoke publish function every hour, on the hour, to keep content fresh
      - schedule: cron(0 * * * ? *)
  contactUs:
    handler: index.contactUs
    events:
      - http:
          path: contact-us
          method: post
          cors: true
  signUp:
    handler: index.signUp
    events:
      - http:
          path: mailing-list
          method: post
          cors: true
  updateUser:
    handler: index.updateUser
    events:
      - http:
          path: mailing-list
          method: patch
          cors: true
  registerForWebinar:
    handler: index.registerForWebinar
    events:
      - http:
          path: webinar-registration
          method: post
          cors: true


resources:
  Resources:
    SiteContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.bucket_name}"
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404/index.html

    SiteContentBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      DependsOn: "SiteContentBucket"
      Properties:
        Bucket: "${self:custom.bucket_name}"
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "s3:GetObject"
              Resource:
                - "arn:aws:s3:::${self:custom.bucket_name}/*"

    ErrorSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: "${env:LAMBDA_ERROR_REPORT_EMAIL}"
            Protocol: email

    ContactUsLambdaErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - Ref: "ErrorSNSTopic"
        AlarmDescription: "An error has been thrown by the lambda function responsible for sending contact form information to hello@red-badger.com."
        AlarmName: WebsiteHonestlyContactUsLambdaErrorAlarm-${env:ENVIRONMENT_NAME}
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: ContactUsLambdaFunction
        EvaluationPeriods: 1
        MetricName: Errors
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count

    SignUpLambdaErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - Ref: "ErrorSNSTopic"
        AlarmDescription: "An error has been thrown by the lambda function responsible for signing people up to our mailing list"
        AlarmName: WebsiteHonestlySignUpLambdaErrorAlarm-${env:ENVIRONMENT_NAME}
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: SignUpLambdaFunction
        EvaluationPeriods: 1
        MetricName: Errors
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
